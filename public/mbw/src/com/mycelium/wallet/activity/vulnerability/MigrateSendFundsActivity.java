/*
 * Copyright 2013 Megion Research and Development GmbH
 *
 * Licensed under the Microsoft Reference Source License (MS-RSL)
 *
 * This license governs use of the accompanying software. If you use the software, you accept this license.
 * If you do not accept the license, do not use the software.
 *
 * 1. Definitions
 * The terms "reproduce," "reproduction," and "distribution" have the same meaning here as under U.S. copyright law.
 * "You" means the licensee of the software.
 * "Your company" means the company you worked for when you downloaded the software.
 * "Reference use" means use of the software within your company as a reference, in read only form, for the sole purposes
 * of debugging your products, maintaining your products, or enhancing the interoperability of your products with the
 * software, and specifically excludes the right to distribute the software outside of your company.
 * "Licensed patents" means any Licensor patent claims which read directly on the software as distributed by the Licensor
 * under this license.
 *
 * 2. Grant of Rights
 * (A) Copyright Grant- Subject to the terms of this license, the Licensor grants you a non-transferable, non-exclusive,
 * worldwide, royalty-free copyright license to reproduce the software for reference use.
 * (B) Patent Grant- Subject to the terms of this license, the Licensor grants you a non-transferable, non-exclusive,
 * worldwide, royalty-free patent license under licensed patents for reference use.
 *
 * 3. Limitations
 * (A) No Trademark License- This license does not grant you any rights to use the Licensorâ€™s name, logo, or trademarks.
 * (B) If you begin patent litigation against the Licensor over patents that you think may apply to the software
 * (including a cross-claim or counterclaim in a lawsuit), your license to the software ends automatically.
 * (C) The software is licensed "as-is." You bear the risk of using it. The Licensor gives no express warranties,
 * guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot
 * change. To the extent permitted under your local laws, the Licensor excludes the implied warranties of merchantability,
 * fitness for a particular purpose and non-infringement.
 */

package com.mycelium.wallet.activity.vulnerability;

import java.util.LinkedList;
import java.util.List;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.mrd.bitlib.StandardTransactionBuilder;
import com.mrd.bitlib.StandardTransactionBuilder.InsufficientFundsException;
import com.mrd.bitlib.StandardTransactionBuilder.OutputTooSmallException;
import com.mrd.bitlib.StandardTransactionBuilder.UnsignedTransaction;
import com.mrd.bitlib.crypto.PrivateKeyRing;
import com.mrd.bitlib.model.Transaction;
import com.mrd.bitlib.model.UnspentTransactionOutput;
import com.mrd.mbwapi.api.ApiError;
import com.mrd.mbwapi.api.BroadcastTransactionResponse;
import com.mycelium.wallet.AndroidRandomSource;
import com.mycelium.wallet.Constants;
import com.mycelium.wallet.MbwManager;
import com.mycelium.wallet.R;
import com.mycelium.wallet.Record;
import com.mycelium.wallet.RecordManager;
import com.mycelium.wallet.Wallet;
import com.mycelium.wallet.Wallet.SpendableOutputs;
import com.mycelium.wallet.api.AbstractCallbackHandler;
import com.mycelium.wallet.api.AndroidAsyncApi;
import com.mycelium.wallet.api.AsyncTask;

public class MigrateSendFundsActivity extends Activity {

   private AsyncTask _task;
   private Record _weakRecord;
   private Record _newRecord;
   private SpendableOutputs _spendable;
   private RecordManager _recordManager;
   private MbwManager _mbwManager;
   private List<UnspentTransactionOutput> _outputs;
   private PrivateKeyRing _privateKeyRing;
   private long _balance;
   private long _maxSpendable;
   private UnsignedTransaction _unsigned;

   /** Called when the activity is first created. */
   @Override
   public void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.migrate_send_funds_activity);

      _mbwManager = MbwManager.getInstance(this.getApplication());
      _recordManager = _mbwManager.getRecordManager();

      // Get intent parameters
      _weakRecord = (Record) getIntent().getSerializableExtra("weak_record");
      _newRecord = (Record) getIntent().getSerializableExtra("new_record");
      _spendable = (SpendableOutputs) getIntent().getSerializableExtra("spendable");

      // Construct list of outputs
      _outputs = new LinkedList<UnspentTransactionOutput>();
      _outputs.addAll(_spendable.unspent);
      _outputs.addAll(_spendable.change);

      // Construct private key ring
      _privateKeyRing = new Wallet(_weakRecord).getPrivateKeyRing();

      // Determine balance
      _balance = 0;
      for (UnspentTransactionOutput out : _outputs) {
         _balance += out.value;
      }

      // Determine max spendable
      _maxSpendable = getMaxAmount();
      if (_balance == 0) {
         // No balance, move to archive description
         ((TextView) findViewById(R.id.tvDescription)).setText(getResources().getString(R.string.migration_no_balance));
      } else {
         // Positive balance
         if (_maxSpendable == 0) {
            // Has balance but too low to send funds
            ((TextView) findViewById(R.id.tvDescription)).setText(getResources().getString(
                  R.string.migration_low_balance));

         } else {
            String maxSpendableString = _mbwManager.getBtcValueString(_maxSpendable);
            // Has balance and ready to swipe
            long fee = _balance - _maxSpendable;
            String feeString = _mbwManager.getBtcValueString(fee);
            ((TextView) findViewById(R.id.tvDescription)).setText(getResources().getString(
                  R.string.migration_swipe_key, _newRecord.address.toMultiLineString(), maxSpendableString, feeString));
         }
      }

      Button btContinue = ((Button) findViewById(R.id.btFinish));
      btContinue.setOnClickListener(new OnClickListener() {

         @Override
         public void onClick(View v) {

            if (_balance == 0 || _maxSpendable == 0) {
               // Move to archive
               _recordManager.archiveRecordByAddress(_weakRecord.address);
               int numWeak = _recordManager.getWeakActiveKeys().size();
               Toast.makeText(MigrateSendFundsActivity.this, R.string.weak_key_moved_to_archive, Toast.LENGTH_LONG)
                     .show();
               if (numWeak != 0) {
                  String msg = getResources().getString(R.string.more_weak_keys, numWeak);
                  Toast.makeText(MigrateSendFundsActivity.this, msg, Toast.LENGTH_LONG).show();
               }
               MigrateSendFundsActivity.this.finish();
            } else {
               _unsigned = createUnsignedTransaction(_maxSpendable);
               _recordManager.addRecord(_newRecord);
               Toast.makeText(MigrateSendFundsActivity.this, R.string.new_key_added, Toast.LENGTH_LONG).show();
               signAndSendTransaction();
            }
         }
      });

   }

   private long getMaxAmount() {
      long satoshis = _balance;
      while (true) {
         satoshis -= StandardTransactionBuilder.MINIMUM_MINER_FEE;
         AmountValidation result = checkSendAmount(satoshis);
         if (result == AmountValidation.Ok) {
            return satoshis;
         } else if (result == AmountValidation.ValueTooSmall) {
            return 0;
         }

      }
   }

   private enum AmountValidation {
      Ok, ValueTooSmall, NotEnoughFunds
   };

   /**
    * Check that the amount is large enough for the network to accept it, and
    * that we have enough funds to send it.
    */
   private AmountValidation checkSendAmount(long satoshis) {
      // Create transaction builder
      StandardTransactionBuilder stb = new StandardTransactionBuilder(Constants.network);

      // Try and add the output
      try {
         stb.addOutput(_newRecord.address, satoshis);
      } catch (OutputTooSmallException e1) {
         return AmountValidation.ValueTooSmall;
      }

      // Try to create an unsigned transaction
      try {
         stb.createUnsignedTransaction(_outputs, null, _privateKeyRing, Constants.network);
      } catch (InsufficientFundsException e) {
         return AmountValidation.NotEnoughFunds;
      }
      return AmountValidation.Ok;
   }

   @Override
   protected void onResume() {
      super.onResume();
   }

   private UnsignedTransaction createUnsignedTransaction(long satoshis) {
      // Construct private key ring
      _privateKeyRing = new Wallet(_weakRecord).getPrivateKeyRing();

      // Create unsigned transaction
      StandardTransactionBuilder stb = new StandardTransactionBuilder(Constants.network);

      // Add the output
      try {
         stb.addOutput(_newRecord.address, _maxSpendable);
      } catch (OutputTooSmallException e) {
         // Does not happen, we already checked this in checkSendAmount
         throw new RuntimeException(e);
      }

      // Create the unsigned transaction
      try {
         // Note that changeaddress is explicitly not set here - change will
         // flow back to the originating address if any
         return stb.createUnsignedTransaction(_outputs, null, _privateKeyRing, Constants.network);
      } catch (InsufficientFundsException e) {
         // Does not happen, we already checked this in checkSendAmount
         throw new RuntimeException(e);
      }
   }

   private void signAndSendTransaction() {
      findViewById(R.id.pbFinish).setVisibility(View.VISIBLE);
      findViewById(R.id.btFinish).setEnabled(false);

      // Sign transaction in the background
      new android.os.AsyncTask<Handler, Integer, Void>() {

         @Override
         protected Void doInBackground(Handler... handler) {
            _unsigned.getSignatureInfo();
            List<byte[]> signatures = StandardTransactionBuilder.generateSignatures(_unsigned.getSignatureInfo(),
                  _privateKeyRing, new AndroidRandomSource());
            final Transaction tx = StandardTransactionBuilder.finalizeTransaction(_unsigned, signatures);
            // execute broadcasting task from UI thread
            handler[0].post(new Runnable() {

               @Override
               public void run() {
                  AndroidAsyncApi api = _mbwManager.getAsyncApi();
                  _task = api.broadcastTransaction(tx, new BroadcastTransactionHandler());
               }
            });
            return null;
         }
      }.execute(new Handler[] { new Handler() });
   }

   class BroadcastTransactionHandler implements AbstractCallbackHandler<BroadcastTransactionResponse> {

      @Override
      public void handleCallback(BroadcastTransactionResponse response, ApiError exception) {
         _task = null;
         Activity me = MigrateSendFundsActivity.this;
         if (exception != null) {
            Toast.makeText(me, getResources().getString(R.string.transaction_not_sent), Toast.LENGTH_LONG).show();
            findViewById(R.id.pbSend).setVisibility(View.INVISIBLE);
            findViewById(R.id.btSend).setEnabled(true);
            return;
         } else {
            Toast.makeText(me, getResources().getString(R.string.transaction_sent), Toast.LENGTH_LONG).show();
            _recordManager.archiveRecordByAddress(_weakRecord.address);
            Toast.makeText(me, getResources().getString(R.string.weak_key_moved_to_archive), Toast.LENGTH_LONG).show();
         }
         // Include the transaction hash in the response
         Intent result = new Intent();
         result.putExtra("transaction_hash", response.hash.toString());
         setResult(RESULT_OK, result);
         MigrateSendFundsActivity.this.finish();
      }
   }

   @Override
   protected void onDestroy() {
      cancelEverything();
      super.onDestroy();
   }

   private void cancelEverything() {
      if (_task != null) {
         _task.cancel();
         _task = null;
      }
   }

}