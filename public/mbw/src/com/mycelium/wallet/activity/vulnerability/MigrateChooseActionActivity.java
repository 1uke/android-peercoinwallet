/*
 * Copyright 2013 Megion Research and Development GmbH
 *
 * Licensed under the Microsoft Reference Source License (MS-RSL)
 *
 * This license governs use of the accompanying software. If you use the software, you accept this license.
 * If you do not accept the license, do not use the software.
 *
 * 1. Definitions
 * The terms "reproduce," "reproduction," and "distribution" have the same meaning here as under U.S. copyright law.
 * "You" means the licensee of the software.
 * "Your company" means the company you worked for when you downloaded the software.
 * "Reference use" means use of the software within your company as a reference, in read only form, for the sole purposes
 * of debugging your products, maintaining your products, or enhancing the interoperability of your products with the
 * software, and specifically excludes the right to distribute the software outside of your company.
 * "Licensed patents" means any Licensor patent claims which read directly on the software as distributed by the Licensor
 * under this license.
 *
 * 2. Grant of Rights
 * (A) Copyright Grant- Subject to the terms of this license, the Licensor grants you a non-transferable, non-exclusive,
 * worldwide, royalty-free copyright license to reproduce the software for reference use.
 * (B) Patent Grant- Subject to the terms of this license, the Licensor grants you a non-transferable, non-exclusive,
 * worldwide, royalty-free patent license under licensed patents for reference use.
 *
 * 3. Limitations
 * (A) No Trademark License- This license does not grant you any rights to use the Licensorâ€™s name, logo, or trademarks.
 * (B) If you begin patent litigation against the Licensor over patents that you think may apply to the software
 * (including a cross-claim or counterclaim in a lawsuit), your license to the software ends automatically.
 * (C) The software is licensed "as-is." You bear the risk of using it. The Licensor gives no express warranties,
 * guarantees or conditions. You may have additional consumer rights under your local laws which this license cannot
 * change. To the extent permitted under your local laws, the Licensor excludes the implied warranties of merchantability,
 * fitness for a particular purpose and non-infringement.
 */

package com.mycelium.wallet.activity.vulnerability;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Toast;

import com.mycelium.wallet.MbwManager;
import com.mycelium.wallet.R;
import com.mycelium.wallet.Record;
import com.mycelium.wallet.Record.Source;
import com.mycelium.wallet.RecordManager;

public class MigrateChooseActionActivity extends Activity {

   private Record _weakRecord;
   private RecordManager _recordManager;
   private MbwManager _mbwManager;

   /** Called when the activity is first created. */
   @Override
   public void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.migrate_choose_action_activity);

      _mbwManager = MbwManager.getInstance(this.getApplication());
      _recordManager = _mbwManager.getRecordManager();

      // Get intent parameters
      _weakRecord = (Record) getIntent().getSerializableExtra("weak_record");

      Button yes = ((Button) findViewById(R.id.btYes));
      yes.setOnClickListener(new OnClickListener() {

         @Override
         public void onClick(View v) {
            Intent intent = new Intent(MigrateChooseActionActivity.this, MigrateGetUnspentOutputsActivity.class);
            intent.putExtra("weak_record", _weakRecord);
            MigrateChooseActionActivity.this.startActivity(intent);
            MigrateChooseActionActivity.this.finish();
         }
      });

      Button no = ((Button) findViewById(R.id.btNo));
      no.setOnClickListener(new OnClickListener() {

         @Override
         public void onClick(View v) {
            // Set the source of this record to SIPA key, it will no longer be
            // marked as vulnerable.
            _recordManager.setSourceForRecordByAddress(_weakRecord.address, Source.IMPORTED_SPIA_PRIVATE_KEY);
            int numWeak = _recordManager.getWeakActiveKeys().size();
            Toast.makeText(MigrateChooseActionActivity.this, R.string.key_marked_as_external, Toast.LENGTH_LONG).show();
            if (numWeak != 0) {
               String msg = getResources().getString(R.string.more_weak_keys, numWeak);
               Toast.makeText(MigrateChooseActionActivity.this, msg, Toast.LENGTH_LONG).show();
            }
            MigrateChooseActionActivity.this.finish();
         }
      });

      Button abort = ((Button) findViewById(R.id.btAbort));
      abort.setOnClickListener(new OnClickListener() {

         @Override
         public void onClick(View v) {
            int numWeak = _recordManager.getWeakActiveKeys().size();
            if (numWeak != 0) {
               String msg = getResources().getString(R.string.more_weak_keys, numWeak);
               Toast.makeText(MigrateChooseActionActivity.this, msg, Toast.LENGTH_LONG).show();
            }
            MigrateChooseActionActivity.this.finish();
         }
      });

   }

   @Override
   protected void onResume() {
      super.onResume();
   }

}